/*
 * Copyright 2019 Ververica GmbH.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/protobuf/serializer.proto

package com.ververica.statefun.flink.common.generated;

public final class Serializer {
  private Serializer() {}

  public static void registerAllExtensions(com.google.protobuf.ExtensionRegistryLite registry) {}

  public static void registerAllExtensions(com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions((com.google.protobuf.ExtensionRegistryLite) registry);
  }

  static final com.google.protobuf.Descriptors.Descriptor
      internal_static_com_ververica_statefun_flink_common_ProtobufSerializerSnapshot_descriptor;
  static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_ververica_statefun_flink_common_ProtobufSerializerSnapshot_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor getDescriptor() {
    return descriptor;
  }

  private static com.google.protobuf.Descriptors.FileDescriptor descriptor;

  static {
    java.lang.String[] descriptorData = {
      "\n\"src/main/protobuf/serializer.proto\022#co"
          + "m.ververica.statefun.flink.common\032 googl"
          + "e/protobuf/descriptor.proto\"\213\001\n\032Protobuf"
          + "SerializerSnapshot\022\033\n\023generated_java_nam"
          + "e\030\001 \001(\t\022\024\n\014message_name\030\002 \001(\t\022:\n\016descrip"
          + "tor_set\030\003 \001(\0132\".google.protobuf.FileDesc"
          + "riptorSetB1\n-com.ververica.statefun.flin"
          + "k.common.generatedP\001b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(
        descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.DescriptorProtos.getDescriptor(),
        },
        assigner);
    internal_static_com_ververica_statefun_flink_common_ProtobufSerializerSnapshot_descriptor =
        getDescriptor().getMessageTypes().get(0);
    internal_static_com_ververica_statefun_flink_common_ProtobufSerializerSnapshot_fieldAccessorTable =
        new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_com_ververica_statefun_flink_common_ProtobufSerializerSnapshot_descriptor,
            new java.lang.String[] {
              "GeneratedJavaName", "MessageName", "DescriptorSet",
            });
    com.google.protobuf.DescriptorProtos.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
